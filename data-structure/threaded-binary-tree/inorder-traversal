class Node {
	int data;
	Node left, right;
	boolean isThreaded;

	Node(int item) {
		data = item;
		left = right = null;
		isThreaded = false;
	}
}

class Demo {
	Node Node;

	public Node createThreadedTree(Node root) {
		if (root == null)
			return null;
		if (root.left == null && root.right == null)
			return root;
		if (root.left != null) {
			Node l = createThreadedTree(root.left);
			l.right = root;
			l.isThreaded = true;
		}
		if (root.right == null) {
			return root;
		}
		return createThreadedTree(root.right);
	}

	public Node leftMost(Node root) {
		while (root != null && root.left != null) {
			root = root.left;
		}
		return root;
	}

	public void inOrder(Node root) {
		if (root == null)
			return;
		Node cur = leftMost(root);
		while (cur != null) {
			System.out.print(cur.data + " ");
			if (cur.isThreaded) {
				cur = cur.right;
			} else {
				cur = leftMost(cur.right);
			}
		}

	}

	public static void main(String[] args) {
		Demo tree = new Demo();

		tree.Node = new Node(1);
		tree.Node.left = new Node(2);
		tree.Node.right = new Node(3);
		tree.Node.left.left = new Node(4);
		tree.Node.left.right = new Node(5);
		tree.Node.right.left = new Node(6);
		tree.Node.right.right = new Node(7);
		tree.createThreadedTree(tree.Node);
		tree.inOrder(tree.Node);

	}
}
